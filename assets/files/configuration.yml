###############################################################
#                Authelia minimal configuration               #
###############################################################

# Configuration Reference: https://github.com/authelia/authelia/blob/master/config.template.yml
# Please see docker .env file as some sensitive data has been moved to this file

# Please modify all variable as designated by <variable_name>
# For example if the variable is authelia.<domain.com> and your
# domain=example.com, then variable = authelia.example.com

# Please modify port number for your needs - Port represents port 
# number of docker container

# host: 0.0.0.0
port: 8080

# logs_level parameter is optional.  Values = trace,debug,info
logs_level: trace
## File path where the logs will be written. If not set logs are written to stdout.
# log_file_path: /var/log/authelia


# Default redirection URL
#
# If user tries to authenticate without any referer, Authelia
# does not know where to redirect the user to at the end of the
# authentication process.
# This parameter allows you to specify the default redirection
# URL Authelia will use in such a case.
#
# Note: this parameter is optional. If not provided, user won't
# be redirected upon successful authentication.
# default_redirection_url: https://home.example.com:8080/

# Google Analytics Tracking ID to track the usage of the portal
# using a Google Analytics dashboard.
#
## google_analytics: UA-00000-01# 


# TOTP Issuer Name
#
# This will be the issuer name displayed in Google Authenticator
# See: https://github.com/google/google-authenticator/wiki/Key-Uri-Format for more info on issuer names
totp:
  issuer: authelia.<domain.com>


authentication_backend:

  # LDAP backend configuration.
  #
  # This backend allows Authelia to be scaled to more
  # than one instance and therefore is recommended for
  # production.
  #ldap:
    # The url to the ldap server. Scheme can be ldap:// or ldaps://
    # url: ldap://127.0.0.1
    # Skip verifying the server certificate (to allow self-signed certificate).
    #skip_verify: false
    # The base dn for every entries
    #base_dn: dc=example,dc=com
    # An additional dn to define the scope to all users
    #additional_users_dn: ou=users
    # The users filter used to find the user DN
    # {0} is a matcher replaced by username.
    # 'cn={0}' by default.
    #users_filter: (cn={0})
    # An additional dn to define the scope of groups
    #additional_groups_dn: ou=groups
    # The groups filter used for retrieving groups of a given user.
    # {0} is a matcher replaced by username.
    # {dn} is a matcher replaced by user DN.
    # {uid} is a matcher replaced by user uid.
    # 'member={dn}' by default.
    #groups_filter: (&(member={dn})(objectclass=groupOfNames))
    # The attribute holding the name of the group
    #group_name_attribute: cn
    # The attribute holding the mail address of the user
    #mail_attribute: mail
    # The username and password of the admin user.
    #user: cn=admin,dc=example,dc=com
    # This secret can also be set using the env variables AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD
    #password: password

  # File backend configuration.
  #
  # With this backend, the users database is stored in a file
  # which is updated when users reset their passwords.
  # Therefore, this backend is meant to be used in a dev environment
  # and not in production since it prevents Authelia to be scaled to
  # more than one instance. The options under password_options have sane
  # defaults, and as it has security implications it is highly recommended
  # you leave the default values. Before considering changing these settings
  # please read the docs page below:
  # https://docs.authelia.com/configuration/authentication/file.html#password-hash-algorithm-tuning
  
  # file location below is location of users.yml file within the docker image.
  file:
    path: /etc/authelia/users.yml
  ##  password_options:
  ##    algorithm: argon2id
  ##    iterations: 1
  ##    key_length: 32
  ##    salt_length: 16
  ##    memory: 1024
  ##    parallelism: 8

# Include this section only if using Duo Push as a two-factor scheme
# Parameters used to contact the Duo API. Those are generated when you protect an application
# of type "Partner Auth API" in the management panel.
#duo_api:
#  hostname: <duo_hostname>
#  integration_key: <duo_integration_key>

session:
  # The name of the session cookie. (default: authelia_session).
  name: authelia_session_id

  # The domain to protect.
  # Note: the login portal must also be a subdomain of that domain.
  # Multiple domains would be specified by:
#  domain:
#    - domain1.example.com
#    - domain2.example.com
#    - domain1.example2.com
  domain: <domain.com>
  
  # The time in seconds before the cookie expires and session is reset.
  expiration: 3600 # 1 hour

  # The inactivity time in seconds before the session is reset.
  inactivity: 300 # 5 minutes
  
  redis:
    host: redis
    port: 6379
    database_index: 0

# Settings to connect to MySQL server - Mariadb implementation must be
# used as formal MySQL implementation is broken
storage:
  mysql:
    host: mariadb
    port: 3306
    database: authelia
    username: authelia

#  local:
#    path: /var/lib/authelia/db.sqlite3

access_control:
  default_policy: deny
  rules:

    - domain: authelia.<domain.com>
      policy: bypass

    - domain: <domain.com>
      policy: two_factor

#    - domain: "*.<domain.com>"
#      subject: "group:admin"
#      policy: two_factor

regulation:
  # The number of failed login attempts before user is banned.
  # Set it to 0 to disable regulation.
  max_retries: 3

  # The time range during which the user can attempt login before being banned.
  # The user is banned if the authentication failed `max_retries` times in a `find_time` seconds window.
  find_time: 120

  # The length of time before a banned user can sign in again.
  ban_time: 300

notifier:
# : filesystem:
#    filename: /var/data/authelia/emails.txt
#
#  smtp:
#    username: smtp
#    host: postfix.<domain.com>
#    port: 587
#    sender: postmaster@authelia.<domain.com>
#
  # Gmail specific setup
  # Sending an email using a Gmail account is as simple as the next section.
  # You need to create an app password by following: https://support.google.com/accounts/answer/185833?hl=en
  smtp:
    username: <gmail_user_name>
    host: smtp.gmail.com
    port: 587
    sender: postmater@authelia.<domain.com>
    #password Put App Specific Password in .env file with variable name AUTHELIA_NOTIFIER_SMTP_PASSWORD
